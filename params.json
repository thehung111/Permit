{"name":"Permit","tagline":"Bitwise based permission scheme for Lavarel 4.x","body":"Permit\r\n======\r\n\r\nA Laravel 4.x package that add Role Based Access Control (RBAC) using bitwise operations. This package borrows the idea from Liferay permission algorithm 6.\r\n\r\nReference: [Liferay Permission Optimization Discussion](http://www.liferay.com/web/guest/community/forums/-/message_boards/message/2380562)\r\n\r\nInstallation\r\n============\r\n\r\n1) Under `require` section of composer.json, add reference to permit package:\r\n\r\n```\r\n\"require\": {\r\n\t\t\"laravel/framework\": \"4.1.*\",\r\n\t\t\"nth/permit\": \"dev-master\"  // add this line\r\n\t},\r\n```\r\n\r\n2) Run update command:\r\n\r\n```\r\n$ composer update\r\n```\r\n\r\nConfiguration\r\n=============\r\n\r\n## Register Provider & Alias \r\nUpdate `app/config/app.php` to register provider and alias: \r\n\r\n```\r\n'providers' => array(\r\n\t\t....\r\n\t\t// register provider \r\n\t\t'Nth\\Permit\\PermitServiceProvider', \r\n\t\t),\r\n\r\n'aliases' => array(\r\n        ....\r\n        \r\n\t\t// register alias for permit facade\r\n\t\t'Permit' => 'Nth\\Permit\\Facades\\PermitFacade',  \r\n\t\t\r\n\t),\r\n\t\t\r\n```\r\n\r\n## Publish configuration\r\n\r\nRun the below command to copy the default config from Permit package to main app:\r\n```\r\n$ php artisan config:publish nth/permit \r\n```\r\n\r\nThe configuration options in `config.php` are as below. Database table names can be configured.\r\n\r\n```\r\n<?php\r\n\r\nreturn array(\r\n\r\n\t/**\r\n\t *  The name of user column in User table\r\n\t * \tThis setting allow migration to create the user-role relationship table based on the primary key of user table \r\n\t */\r\n\t'user_pk_column_name' => 'userId',\r\n\r\n\t/*\r\n\t|--------------------------------------------------------------------------\r\n\t| Data type for user primary key column\r\n\t|--------------------------------------------------------------------------\r\n\t|\r\n\t| \tThis option allows you to specify the data type of user pk column\r\n\t|\r\n\t| \tSupported options: \"string\", \"integer\", \"bigInteger\", \"integer_unsigned\", \"bigInteger_unsigned\"\r\n\t|\tIf no option is provided, integer_unsigned will be used\r\n\t|\r\n\t*/\r\n\t'user_pk_column_data_type' => 'integer_unsigned',\r\n\r\n\r\n\t// prefix for database tables to prevent conflict with other packages\r\n\t'db_prefix' => 'nth', \r\n\t\r\n\t/*\r\n\t|--------------------------------------------------------------------------\r\n\t| Database tables\r\n\t|--------------------------------------------------------------------------\r\n\t|\tConfigure the table names if necessary.\r\n\t| \tIf database prefix is set, the prefix will be appended to the table name\r\n\t|\te.g. if role_table_name is 'role' and db_prefix is 'nth', then table name for role is nth_role\r\n\t|\r\n\t*/\r\n\t'user_role_table_name' => 'user_role',\r\n\t'role_table_name' => 'role',\r\n\t'resource_action_table_name' => 'resource_action',\r\n\t'resource_perm_table_name' => 'resource_perm' , // resource permission\r\n\r\n\t/*\r\n\t|--------------------------------------------------------------------------\r\n\t| Data Provider\r\n\t|--------------------------------------------------------------------------\r\n\t|\r\n\t| \tThis option allows you to specify where to load resource actions data from\r\n\t|\t\"config_file\" options will load the data from local config file : perms.php \r\n\t|\t\"database\" file will load the data from database table: resource_action\r\n\t| \t\r\n\t|\tSupported options: \"config_file\", \"database\"\r\n\t|\r\n\t*/\r\n\t'action_data_provider' => 'config_file' ,\r\n\t\r\n);\r\n```\r\n\r\nNote that `Resource Actions` data can be loaded from local file (`perms.php`) or the database table. \r\n\r\n## Create Initial Database Tables & Data\r\n\r\n1) First run migration to create the tables:\r\n\r\n```\r\n$ php artisan migrate --package=\"nth/permit\"\r\n```\r\n\r\n2) Run database seeding:\r\n```\r\n$ php artisan db:seed --class=\"\\Nth\\Permit\\Seeds\\PermitDatabaseSeeder\"\r\n```\r\n\r\n### How It Works?\r\n\r\nTODO: put in the schema and explain various concepts.\r\n\r\nThe following tables are created:\r\n\r\n- `role`\r\n- `user_role` (the userid column datatype is mixed based on config file)\r\n- `resource_action` (an action user can perform on a particular resource e.g. edit a blog post)\r\n- `resource_perm` (the actual table that stores the permissions)\r\n\r\nA resource represents a connection to an entity you want to perform the action. While a resource action describes what you want to do to the entity.\r\n\r\nE.g. Resource is \"blog\", resource actions can be \"blog.add\", \"blog.edit\", \"blog.delete\".\r\n\r\nA resource permission consists of the following fields:\r\n\r\n- `resourceName` (e.g. 'patient')\r\n\r\n- `roleId` (e.g. 'doctor' who can view this particular 'patient' only if the patient is assigned to him. Or a 'patient' who can only view his own record)\r\n\r\n- `actionsBitwiseValue` : the sum of all actions this role can do i.e a AND bit operation for all the resource action bitwise value\r\n\r\n- `scope` : refers to whether this permission applies to all instances or only to individual instances (e.g. can a 'doctor' role view all patient records or only a particular record of his patient. Corresponds to `SCOPE_ALL` & `SCOPE_INSTANCE` scenarios)\r\n\r\n- `resourceInstancePK`: if the scope is for individual instance, then a value must be set here e.g. the primary key of a 'patient'\r\n\r\n- `ownerPK` : the primary key of the owner of this object. This is necessary as after an object has been created, the owner must have access to this object.\r\n\r\n\r\n\r\n\r\n\r\n\r\n## Testing\r\nThe unit tests are run using sqlite in memory database from the main folder.\r\n\r\n1) Under `app/config/testing/database.php`, configure as follow:\r\n\r\n```\r\n   'default' => 'sqlite',\r\n   \r\n   'connections' => array(\r\n\r\n\t\t'sqlite' => array(\r\n\t\t\t'driver'   => 'sqlite',\r\n\t\t\t'database' => ':memory:',\r\n\t\t\t'prefix'   => '',\r\n\t\t),\r\n```\r\n\r\nRemember to run migration and seeding (use PermitTestDatabaseSeeder) to setup test data.\r\n\r\n2) Locate phpunit.xml under main app (not the package), add a test suite:\r\n\r\n```\r\n <testsuites>\r\n        <testsuite name=\"Application Test Suite\">\r\n            <directory>./app/tests/</directory>\r\n        </testsuite>\r\n\r\n\t     <!-- Permit package -->\r\n         <testsuite name=\"Permit\">\r\n            <directory>./workbench/nth/permit/tests/</directory>\r\n        </testsuite>\r\n\r\n    </testsuites>\r\n```\r\n\r\n3) Run unit tests:\r\n\r\n```\r\n$ phpunit --testsuite=Permit\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}